services:
  # ─── MongoDB ──────────────────────────────────────
  mongo:
    image: mongo:7.0
    container_name: ${MONGODB_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${MONGODB_EXPOSED_PORT}:27017"
    env_file:
      - .env
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"db.adminCommand('ping')\" > /dev/null 2>&1"]
      interval: 360s
      timeout: 10s
      retries: 5
      start_period: 20s
    logging:
      driver: "none"
    networks:
      - app-network

  # ─── Spring Boot Server ──────────────────────────────
  server-gateway:
    build:
      context: ./server/skillforge-gateway
      dockerfile: Dockerfile
    image: ${SERVER_CONTAINER_NAME}-gateway:latest
    container_name: ${SERVER_CONTAINER_NAME}-gateway
    restart: unless-stopped
    ports:
      - "${SERVER_PORT_GATEWAY}:${SERVER_PORT_GATEWAY}"
    env_file:
      - .env
    environment:
      SPRING_PROFILE_ACTIVES: ${SPRING_PROFILE_ACTIVES}
      SERVER_PORT_GATEWAY: ${SERVER_PORT_GATEWAY}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${SERVER_PORT_GATEWAY}/actuator/health || exit 1"]
      interval: 360s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
  user-service:
    build:
      context: ./server/skillforge-user
      dockerfile: Dockerfile
    image: ${SERVER_CONTAINER_NAME}-user:latest
    container_name: ${SERVER_CONTAINER_NAME}-user
    restart: unless-stopped
    ports:
      - "${SERVER_PORT_USER}:${SERVER_PORT_USER}"
    env_file:
      - .env
    environment:
      SPRING_PROFILE_ACTIVES: ${SPRING_PROFILE_ACTIVES}
      SERVER_PORT_USER: ${SERVER_PORT_USER}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_USERNAME: ${MONGODB_USERNAME}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_HOST: mongo
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
    depends_on:
      server-gateway:
        condition: service_healthy
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${SERVER_PORT_USER}/actuator/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
  
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_APP_NAME: ${VITE_APP_NAME}
        VITE_APP_VERSION: ${VITE_APP_VERSION}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        VITE_API_VERSION: ${VITE_API_VERSION}
        BUILD_MODE: ${BUILD_MODE}
        DOCKERIZED: 1
        
    image: ${CLIENT_CONTAINER_NAME}:latest
    container_name: ${CLIENT_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${VITE_PORT}:3000"
    depends_on:
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
  
  weaviate-db:
      image: cr.weaviate.io/semitechnologies/weaviate:1.30.3
      container_name: ${WEAVIATE_CONTAINER_NAME}
      restart: on-failure:0
      command:
        - --host
        - 0.0.0.0
        - --port
        - "8080"
        - --scheme
        - http
      ports:
        - "${WEAVIATE_EXPOSED_HTTP_PORT}:8080"
        - "${WEAVIATE_EXPOSED_GRPC_PORT}:50051"
      environment:
        QUERY_DEFAULTS_LIMIT: 25
        AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
        PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
        BACKUP_FILESYSTEM_PATH: '/var/lib/weaviate/backups'
        ENABLE_API_BASED_MODULES: 'true'
        CLUSTER_HOSTNAME: 'node1'
      volumes:
        - weaviate-genai-data:/var/lib/weaviate
      healthcheck:
        test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/v1/.well-known/ready || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 10s
      networks:
        - app-network

  genai:
    build:
      context: ./genai
      dockerfile: Dockerfile
      args:
        GENAI_APP_NAME: ${GENAI_APP_NAME}
        GENAI_APP_VERSION: ${GENAI_APP_VERSION}
        GENAI_PORT: ${GENAI_PORT}
    image: ${GENAI_CONTAINER_NAME}:latest
    container_name: ${GENAI_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - .env
    environment:
      WEAVIATE_HOST: ${WEAVIATE_HOST}
      WEAVIATE_HTTP_PORT: 8080
      WEAVIATE_GRPC_PORT: 50051
      GENAI_PORT: ${GENAI_PORT}
      GENAI_APP_NAME: ${GENAI_APP_NAME}
      GENAI_APP_VERSION: ${GENAI_APP_VERSION}
      LLM_PROVIDER: ${LLM_PROVIDER}
      OPENAI_API_BASE: ${OPENAI_API_BASE}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
    ports:
      - "${GENAI_PORT}:${GENAI_PORT}"
    depends_on:
      weaviate-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${GENAI_PORT}/ping || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

volumes:
  mongo-data:
  weaviate-genai-data:

networks:
  app-network:
    driver: bridge