name: Deploy to AWS

on:
  workflow_call:
    inputs:
      ec2_ip:
        required: true
        type: string
      OPENAI_MODEL:
        required: false
        type: string
        default: "gpt-4o-mini"
      LLM_PROVIDER:
        required: false
        type: string
        default: "openai"
    secrets:
      AWS_EC2_PRIVATE_KEY:
        required: true
      MONGODB_URL:
        required: true
      MONGODB_DATABASE:
        required: true
      JWT_SECRET:
        required: true
      OPENAI_BASE_URL:
        required: true
      OPENAI_API_KEY:
        required: true
      GRAFANA_ADMIN_USER:
        required: true
      GRAFANA_ADMIN_PASSWORD:
        required: true
permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: AWS
      url: 'https://client.${{ inputs.ec2_ip }}.nip.io'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Test SSH, disk space & Docker registry
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            set -e
            echo "Testing disk space:"
            df -h /
            echo "Testing Docker:"
            docker ps
            echo "Testing Docker registry login:"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "All initial checks passed."

      - name: Copy Docker Compose File From Repo to the EC2 Instance
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          # Copy and rename the compose file so that the follow-up command uses the expected filename
          source: "./compose.aws.yml"
          target: /home/${{ vars.AWS_EC2_USER }}/docker-compose.prod.yml
    
      - name: Get latest version (or use 1.0.0-beta as fallback)
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0-beta")
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Latest tag is: $TAG"
          
      - name: Prepare Environment File (.env)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ vars.AWS_EC2_USER }}
            rm -f .env
            echo "Creating .env file..."
            
            echo "APP_VERSION=${{ steps.get_tag.outputs.tag }}" >> .env
            echo "VITE_APP_VERSION=${{ steps.get_tag.outputs.tag }}" >> .env
            echo "GENAI_APP_VERSION=${{ steps.get_tag.outputs.tag }}" >> .env

            echo "SPRING_PROFILES_ACTIVE=prod" >> .env
            
            echo "MONGO_URL=${{ secrets.MONGODB_URL }}" >> .env
            echo "MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}" >> .env
            
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            
            # GenAI service expects OPENAI_API_BASE
            echo "OPENAI_API_BASE=${{ secrets.OPENAI_BASE_URL }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "OPENAI_MODEL=${{ inputs.OPENAI_MODEL }}" >> .env
            echo "LLM_PROVIDER=${{ inputs.LLM_PROVIDER }}" >> .env

            echo "UVICORN_WORKERS=${{ vars.UVICORN_WORKERS }}" >> .env
            
            echo "VITE_PUBLIC_API_URL=https://api.${{ inputs.ec2_ip }}.nip.io/api" >> .env
            echo "CLIENT_HOST=client.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "SERVER_HOST=api.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "GENAI_HOST=api.genai.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "MAILHOG_HOST=mail.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "PROMETHEUS_HOST=prometheus.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "PROMTAIL_HOST=promtail.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "ALERTMANAGER_HOST=alertmanager.${{ inputs.ec2_ip }}.nip.io" >> .env
            echo "GRAFANA_HOST=grafana.${{ inputs.ec2_ip }}.nip.io" >> .env

            echo "GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}" >> .env
            echo "GRAFANA_ADMIN_PWD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env

            chmod 600 .env
            echo ".env file created ✅"
      - name: SSH to the EC2 Instance and Start Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 10
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ vars.AWS_EC2_USER }}
            echo " >>> Logging into Docker registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo " >>> Starting Docker Compose..."
            if ! docker compose -f docker-compose.prod.yml --env-file .env up --pull=always -d --remove-orphans; then
              echo "❌ Docker Compose failed. Showing service status:"
              docker compose -f docker-compose.prod.yml ps
              echo "-----------------------------------------"
              echo "------------ Recent logs ----------------"
              docker compose -f docker-compose.prod.yml logs --tail=40
              exit 1
            fi
      - name: Echo all links
        run: |
          echo "Deployment complete! Access your services at:"
          echo "Client: https://client.${{ inputs.ec2_ip }}.nip.io"
          echo "API: https://api.${{ inputs.ec2_ip }}.nip.io"
          echo "GenAI: https://api.genai.${{ inputs.ec2_ip }}.nip.io"
          echo "Mailhog: https://mail.${{ inputs.ec2_ip }}.nip.io"
          echo "Prometheus: https://prometheus.${{ inputs.ec2_ip }}.nip.io"
          echo "Loki: https://loki.${{ inputs.ec2_ip }}.nip.io"
          echo "Promtail: https://promtail.${{ inputs.ec2_ip }}.nip.io"
          echo "Alertmanager: https://alertmanager.${{ inputs.ec2_ip }}.nip.io"
          echo "Grafana: https://grafana.${{ inputs.ec2_ip }}.nip.io"
          echo "Check the status of the services on the EC2 instance with:"
          echo "docker compose -f docker-compose.prod.yml ps"
          echo "View logs with:"
          echo "docker compose -f docker-compose.prod.yml logs --tail=40"