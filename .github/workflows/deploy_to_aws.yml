name: Deploy to AWS

on:
  workflow_call:
    inputs:
      ec2_ip:
        required: true
        type: string
    secrets:
      AWS_EC2_PRIVATE_KEY:
        required: true
      MONGODB_USERNAME:
        required: true
      MONGODB_PASSWORD:
        required: true
      JWT_SECRET:
        required: true
      OPENAI_API_KEY:
        required: true
permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: AWS
      url: 'https://client.${{ inputs.ec2_ip }}.nip.io'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Test SSH, disk space & Docker registry
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            set -e
            echo "Testing disk space:"
            df -h /
            echo "Testing Docker:"
            docker ps
            echo "Testing Docker registry login:"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "All initial checks passed."

      - name: Copy Docker Compose File From Repo to the EC2 Instance
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "./docker-compose.prod.yml"
          target: /home/${{ vars.AWS_EC2_USER }}
    
      - name: Get latest tag (or use 1.0-alpha as fallback)
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0-alpha")
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Latest tag is: $TAG"
          
      - name: Prepare Environment File (.env.prod)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ vars.AWS_EC2_USER }}
            rm -f .env.prod
            echo "Creating .env.prod file..."
            echo "MONGODB_CONTAINER_NAME=skill-forge-mongo-db" >> .env.prod
            echo "CLIENT_CONTAINER_NAME=skill-forge-client" >> .env.prod
            echo "SERVER_CONTAINER_NAME=skill-forge-server" >> .env.prod
            echo "GENAI_CONTAINER_NAME=skill-forge-genai" >> .env.prod
            echo "WEAVIATE_CONTAINER_NAME=skill-forge-weaviate" >> .env.prod

            echo "MONGODB_EXPOSED_PORT=27018" >> .env.prod
            echo "MONGODB_DATABASE=${{ vars.MONGODB_DATABASE }}" >> .env.prod
            echo "MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}" >> .env.prod
            echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env.prod

            echo "SPRING_PROFILE_ACTIVES=docker" >> .env.prod
            echo "SERVER_PORT_GATEWAY=8081" >> .env.prod
            echo "SERVER_PORT_USER=8082" >> .env.prod
            echo "SERVER_PORT_COURSES=8083" >> .env.prod

            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.prod
            echo "JWT_EXPIRATION_MS=${{ vars.JWT_EXPIRATION_MS }}" >> .env.prod

            echo "VITE_PORT=3000" >> .env.prod
            echo "VITE_APP_NAME=SkillForge.ai" >> .env.prod
            echo "VITE_APP_VERSION=${{ steps.get_tag.outputs.tag }}" >> .env.prod
            echo "VITE_API_BASE_URL=/api/" >> .env.prod
            echo "VITE_API_VERSION=v1" >> .env.prod
            echo "BUILD_MODE=production" >> .env.prod

            echo "WEAVIATE_HOST=weaviate-db" >> .env.prod
            echo "WEAVIATE_EXPOSED_HTTP_PORT=1234" >> .env.prod
            echo "WEAVIATE_EXPOSED_GRPC_PORT=50051" >> .env.prod

            echo "GENAI_APP_NAME=skill-forge-genai" >> .env.prod
            echo "GENAI_APP_VERSION=${{ steps.get_tag.outputs.tag }}" >> .env.prod
            echo "GENAI_PORT=8888" >> .env.prod
            echo "CORS_ALLOW_ORIGINS=*" >> .env.prod
            echo "IS_DEV_MODE=0" >> .env.prod
            echo "UVICORN_WORKERS=${{ vars.UVICORN_WORKERS }}" >> .env.prod
            echo "LLM_PROVIDER=${{ vars.LLM_PROVIDER }}" >> .env.prod
            echo "OPENAI_API_BASE=${{ vars.OPENAI_API_BASE }}" >> .env.prod
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.prod
            echo "OPENAI_MODEL=${{ vars.OPENAI_MODEL }}" >> .env.prod

            echo "CLIENT_HOST=client.${{ inputs.ec2_ip }}.nip.io" >> .env.prod
            echo "SERVER_HOST=api.${{ inputs.ec2_ip }}.nip.io" >> .env.prod
            echo "PUBLIC_API_URL=https://api.${{ inputs.ec2_ip }}.nip.io/api" >> .env.prod

            chmod 600 .env.prod
            echo ".env.prod file created."

      - name: SSH to the EC2 Instance and Start Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 10
        with:
          host: ${{ inputs.ec2_ip }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ vars.AWS_EC2_USER }}
            echo " >>> Logging into Docker registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo " >>> Starting Docker Compose..."
            if ! docker compose -f docker-compose.prod.yml --env-file .env.prod up --pull=always -d; then
              echo "‚ùå Docker Compose failed. Showing service status:"
              docker compose -f docker-compose.prod.yml ps
              echo "-----------------------------------------"
              echo "------------ Recent logs ----------------"
              docker compose -f docker-compose.prod.yml logs --tail=40
              exit 1
            fi