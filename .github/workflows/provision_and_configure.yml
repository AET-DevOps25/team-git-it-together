name: Provision and Configure AWS

on:
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
        type: string
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
        type: string
      AWS_SESSION_TOKEN:
        description: 'AWS Session Token'
        required: true
        type: string
      
      TF_TOKEN:
        description: 'Terraform Cloud API Token'
        required: true
        type: string
      AWS_REGION:
        description: 'AWS Region (e.g. us-east-1)'
        required: true
        default: 'us-east-1'
        type: string
permissions:
  contents: read
  packages: read
  id-token: write
jobs:
  provision_and_configure:
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ github.event.inputs.TF_TOKEN }}
    outputs:
      ec2_ip: ${{ steps.get_public_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1
      
      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: infra/terraform/.terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('infra/terraform/**.tf') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.AWS_REGION }}

      - name: Generate terraform.tfvars
        run: |
          echo 'key_name = "vockey"' > infra/terraform/terraform.tfvars
          echo 'eip_allocation_id = "eipalloc-09c9c194eb27783aa"' >> infra/terraform/terraform.tfvars

      - name: Terraform Init
        run: terraform -chdir=infra/terraform init

      - name: Terraform Plan
        run: terraform -chdir=infra/terraform plan

      - name: Terraform Apply
        run: terraform -chdir=infra/terraform apply -auto-approve

      # Output EC2 Public IP for use by deploy workflow
      - name: Get EC2 Public IP
        id: get_public_ip
        run: |
          echo "The EC2 has the following public IP: $(terraform -chdir=infra/terraform output -raw public_ip)"
          echo "ec2_ip=$(terraform -chdir=infra/terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      # Write SSH key for Ansible
      - name: Write SSH key
        run: |
          echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > infra/ansible/id_rsa
          chmod 600 infra/ansible/id_rsa

      # Write inventory for Ansible using the new IP
      - name: Write inventory.ini for Ansible
        run: |
          echo "[git_it_together]" > infra/ansible/inventory.ini
          echo "${{ steps.get_public_ip.outputs.ec2_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=infra/ansible/id_rsa" >> infra/ansible/inventory.ini

      # Add host to known_hosts to avoid SSH prompts
      - name: Add EC2 to known_hosts
        run: |
         ssh-keyscan ${{ steps.get_public_ip.outputs.ec2_ip }} >> infra/ansible/known_hosts

      # Run Ansible Playbook for server configuration
      - name: Configure EC2 with Ansible
        working-directory: infra/ansible
        run: |
          ansible-playbook -i inventory.ini docker-setup.yml

      - name: Trigger Deploy Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
            workflow: "deploy_to_aws.yml"
            ref: ${{ github.ref }}
            inputs: |
              ec2_ip: "${{ steps.get_public_ip.outputs.ec2_ip }}"