name: Build, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - main
    paths-ignore:
      # Ignore all markdown files (root & subdirs)
      - '**/*.md'
      # Ignore everything in docs, seed, and testing scripts
      - 'docs/**'
      - 'seed/**'
      - 'testing-scripts/**'
      # Ignore any copy-env.* file at any depth
      - '**/copy-env.*'
      # ignore .gitignore files anywhere
      - '**/.gitignore'
      # ignore .env* files
      - '**/.env*'
      # Ignore files not in .github/workflows
      - '!**/.github/workflows/**'
  workflow_dispatch:
    inputs:
      OPENAI_MODEL:
        description: "OpenAI model to use for deployment"
        required: false
        type: string
        default: "gpt-4"
      LLM_PROVIDER:
        description: "LLM provider to use for deployment"
        required: false
        type: string
        default: "openai"
      
jobs:
  build-and-test-client:
    name: Build and Test SkillForge.ai Client
    uses: ./.github/workflows/build-and-test-client.yml
    
  build-and-test-server:
    name: Build and Test SkillForge.ai Server
    uses: ./.github/workflows/build-and-test-server.yml
    
  build-and-test-genai:
    name: Build and Test SkillForge.ai GenAI
    uses: ./.github/workflows/build-and-test-genai.yml
    
  build-and-push-images:
    name: Build and Push Docker Images
    needs: [build-and-test-client, build-and-test-server, build-and-test-genai]
    uses: ./.github/workflows/docker-build-push.yml
    with:
      API_URL: https://api.skillforge.student.k8s.aet.cit.tum.de
    
  deploy-to-kubernetes:
    name: Deploy to Kubernetes Cluster (Rancher Cluster)
    needs: [build-and-push-images]
    uses: ./.github/workflows/deploy-to-kubernetes.yml
    secrets:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}
      MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    with:
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
      LLM_PROVIDER: ${{ vars.LLM_PROVIDER }}
      
  notify-deployment:
    name: Notify Deployment Status
    needs: [deploy-to-kubernetes]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-to-kubernetes.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Main Application: https://skillforge.student.k8s.aet.cit.tum.de"
            echo "üîå API Gateway: https://api.skillforge.student.k8s.aet.cit.tum.de"
            echo "üìä Grafana: https://grafana.skillforge.student.k8s.aet.cit.tum.de"
          else
            echo "‚ùå Deployment failed!"
            echo "Check the deployment logs for more details."
          fi
